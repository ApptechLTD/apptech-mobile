<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.apptech.first</groupId>
	<artifactId>First</artifactId>
	<version>1.0</version>
	<packaging>war</packaging>
	<name>com.apptech.first.client.First</name>

	<properties>
		<gwtversion>2.5.0</gwtversion>
		<spring.version>3.2.1.RELEASE</spring.version>
		<hibernate.version>4.1.4.Final</hibernate.version>
		<!-- Don't let your Mac use a crazy non-standard encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java-apns-version>0.1.6</java-apns-version>
		<!-- gwt configuration -->
		<gwt.compiler.localWorkers>1</gwt.compiler.localWorkers>
	</properties>

	<repositories>
		<repository>
			<id>objectify-appengine</id>
			<url>http://objectify-appengine.googlecode.com/svn/maven</url>
		</repository>
		<repository>
		    <id>gcm-server-repository</id>
		    <url>https://raw.github.com/slorber/gcm-server-repository/master/releases/</url>
		</repository>
	</repositories>

	<build>
	    <finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.8</version>

				<configuration>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>false</downloadJavadocs>
					<projectnatures>
						<projectnature>org.eclipse.jdt.core.javanature</projectnature>
						<projectnature>com.google.gdt.eclipse.core.webAppNature</projectnature>

						<nature>com.google.gwt.eclipse.core.gwtNature</nature>
					</projectnatures>
					<buildcommands>
						<buildcommand>org.eclipse.jdt.core.javabuilder</buildcommand>
						<buildcommand>com.google.gdt.eclipse.core.webAppProjectValidator</buildcommand>

						<buildcommand>com.google.appengine.eclipse.core.projectValidator</buildcommand>
						<buildcommand>com.google.gwt.eclipse.core.gwtProjectValidator</buildcommand>
					</buildcommands>
					<classpathContainers>
						<classpathContainer>org.eclipse.jdt.launching.JRE_CONTAINER</classpathContainer>

						<classpathContainer>com.google.gwt.eclipse.core.GWT_CONTAINER</classpathContainer>
					</classpathContainers>
					<excludes>
						<exclude>com.google.gwt:gwt-servlet</exclude>
						<exclude>com.google.gwt:gwt-user</exclude>
						<exclude>javax.validation:validation-api</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>gwt-maven-plugin</artifactId>
				<version>2.5.0</version>
				<executions>
					<execution>
						<configuration>
							<runTarget>First.html</runTarget>
							<copyWebapp>true</copyWebapp>
							<module>com.apptech.first.First</module>
						</configuration>
						<id>compile gwt</id>
						<goals>
							<goal>compile</goal>
							<!-- <goal>test</goal> -->
						</goals>
					</execution>
				</executions>

				<configuration>
					<runTarget>First.html</runTarget>
				</configuration>
			</plugin>

			<!-- Allows the routes to be run via 'mvn camel:run' -->
			<plugin>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-maven-plugin</artifactId>
				<version>2.10.3</version>
			</plugin>

			<!-- so we can run mvn jetty:run -->
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>7.0.1.v20091125</version>
				<configuration>
					<connectors>
						<connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
							<port>8080</port>
							<maxIdleTime>60000</maxIdleTime>
						</connector>
					</connectors>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<!-- Remove the cache file. When the gwt debug, if would generate a 
							cache temp file in the source folder, which is useless when it releases. -->
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<echo> delete First.nocache.js from .../webapp/First/ folder
								</echo>
							    <mkdir dir="src/main/webapp/First/"/>
								<delete>
									<fileset dir="src/main/webapp/First/">
										<include name="First.nocache.js" />
									</fileset>
									
								</delete>
								<echo> copy the app push certificate to the target folder, from
									${project.basedir}/src/main/resources to
									${project.build.outputDirectory}
								</echo>
								<copy todir="${project.build.outputDirectory}" overwrite="false">
									<fileset dir="${project.basedir}/src/main/resources">
										<include name="*.*" />
									</fileset>
								</copy>
							</tasks>
						</configuration>
					</execution>
					<execution>
						<!-- Copy the compiled web app files to iOS and Android project -->
						<id>copywebappfolder</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>

								<!-- iOS -->
								<echo>Copy web app to iOS project</echo>
								<echo>Clear the output folder: ${project.basedir}/../First-Native-IOS/www</echo>
								<delete includeemptydirs="true">
    								<fileset dir="${project.basedir}/../First-Native-IOS/www"
    									includes="**/*" excludes=".svn/**, cordova.js" defaultexcludes="false"/>
 								</delete>
								<copy todir="${project.basedir}/../First-Native-IOS/www/" overwrite="false">
									<fileset dir="${project.build.directory}/${project.artifactId}"
										includes="First/**/*, First.html, cordova-plugins/**/*"/>
								</copy>

								<!-- Android -->
								<echo>Copy web app to Android project</echo>
								<echo>Clear the output folder: ${project.basedir}/../First-Native-Android/assets/www</echo>
								<delete includeemptydirs="true">
    								<fileset dir="${project.basedir}/../First-Native-Android/assets/www"
    									includes="**/*" excludes=".svn/**, cordova.js" defaultexcludes="false"/>
 								</delete>
								<copy todir="${project.basedir}/../First-Native-Android/assets/www" overwrite="false">
									<fileset dir="${project.build.directory}/${project.artifactId}"
										includes="First/**/*, First.html, cordova-plugins/**/*"/>
								</copy>
								
							</tasks>
						</configuration>
						
					</execution>
				</executions>
			</plugin>
			

			<!-- Replacement plugin Is used to replace the mgwt.os parameter in the 
				GWT module before the GWT compilation. During dev we use only one target 
				platform (safari with retina) and for build we need iphone, retina , adroid -->
			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>replacer</artifactId>
				<version>1.5.2</version>
				<executions>
					<execution>
					    <phase>package</phase>
						<goals>
							<goal>replace</goal>
						</goals>
					</execution>
				</executions>
				<configuration> 
					<file>${project.basedir}/target/classes/com/apptech/first/First.gwt.xml</file>
					<replacements>
						<replacement>
							<token>value="retina"</token>
							<value>value="iphone,retina,android"</value>
						</replacement>
					</replacements>
				</configuration>
			</plugin>
		</plugins>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/client/**</include>
					<include>**/*.gwt.xml</include>
				</includes>
			</resource>
		</resources>
	</build>

	<dependencies>

		<!-- JPA and Database -->
		<!-- <dependency> <groupId>org.hsqldb</groupId> <artifactId>hsqldb</artifactId> 
			<version>2.2.8</version> <scope>runtime</scope> </dependency> -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.3.170</version>
		</dependency>

		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
			
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<version>1.0.0.Final</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Apache Camel -->

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-spring-ws</artifactId>
			<version>2.10.3</version>
			<exclusions>
				<exclusion>
					<artifactId>slf4j-api</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-jaxb</artifactId>
			<version>2.10.3</version>
		</dependency>

		<!-- Camel apns component -->
		<dependency>
		    <groupId>org.apache.camel</groupId>
		    <artifactId>camel-apns</artifactId>
		    <version>2.10.3</version>
		    <!-- use the same version as your Camel core version -->
		    <exclusions>
		    	<exclusion>
		    		<artifactId>slf4j-api</artifactId>
		    		<groupId>org.slf4j</groupId>
		    	</exclusion>
		    </exclusions>
		</dependency>

		<!-- for testing apns -->
		<dependency>
			<groupId>com.notnoop.apns</groupId>
			<artifactId>apns</artifactId>
			<version>${java-apns-version}</version>
			<type>test-jar</type>
			<scope>test</scope>
		</dependency>

		<!-- for running inside a servlet container -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- Google Web Toolkit (GWT) -->

		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-user</artifactId>
			<version>${gwtversion}</version>
			<!-- "provided" so that we don't deploy -->
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-servlet</artifactId>
			<version>${gwtversion}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- GWT projects do not usually need a dependency on gwt-dev. Uncomment 
			this dependency, Whether your MobileWebApp contains a GWTC Linker (AppCacheLinker) 
			which in turn depends on internals of the GWT compiler. <dependency> <groupId>com.google.gwt</groupId> 
			<artifactId>gwt-dev</artifactId> <version>${gwtversion}</version> <scope>provided</scope> 
			</dependency> -->

		<!-- gwtrpc-spring dependency -->

		<dependency>
			<groupId>org.gwtrpcspring</groupId>
			<artifactId>gwtrpcspring</artifactId>
			<version>1.02</version>
		</dependency>

		<!-- mgwt dependency -->
		<dependency>
			<groupId>com.googlecode.mgwt</groupId>
			<artifactId>mgwt</artifactId>
			<version>1.1.2</version>
		</dependency>

		<!-- gwtphonegap dependency -->
		<dependency>
			<groupId>com.googlecode.gwtphonegap</groupId>
			<artifactId>gwtphonegap</artifactId>
			<version>2.0.0.0</version>
		</dependency>

		<!-- RequestFactory server -->

		<dependency>
			<groupId>com.google.web.bindery</groupId>
			<artifactId>requestfactory-server</artifactId>
			<version>${gwtversion}</version>
		</dependency>

		<!-- RequestFactory will use JSR 303 javax.validation if you let it -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>4.1.0.Final</version>
			<exclusions>
				<exclusion>
					<groupId>javax.xml.bind</groupId>
					<artifactId>jaxb-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.xml.bind</groupId>
					<artifactId>jaxb-impl</artifactId>
				</exclusion>
				<exclusion>
					<artifactId>slf4j-api</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Required by Hibernate validator because slf4j-log4j is optional in 
			the hibernate-validator POM -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.6.1</version>
			<exclusions>
				<exclusion>
					<artifactId>slf4j-api</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.1</version>
		</dependency>

		<!-- Objectify for persistence. It uses the stock javax.persistence annotations -->

		<!-- GIN and Guice for IoC / DI -->

		<dependency>
			<groupId>com.google.inject</groupId>
			<artifactId>guice</artifactId>
			<version>2.0</version>
		</dependency>
		<dependency>
			<groupId>com.google.gwt.inject</groupId>
			<artifactId>gin</artifactId>
			<version>1.0</version>
		</dependency>

		<!-- Use the JSR 330 injection interfaces <dependency> <groupId>javax.inject</groupId> 
			<artifactId>javax.inject</artifactId> <version>1</version> </dependency> -->

		<!-- Unit tests -->

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
			<scope>test</scope>
		</dependency>

		<!-- Validation -->

		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.0.0.GA</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.0.0.GA</version>
			<classifier>sources</classifier>
			<scope>test</scope>
		</dependency>


		<!-- Spring Frmework -->

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- To support the loading of Test Data -->
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils-core</artifactId>
			<version>1.8.3</version>
			<type>jar</type>
		</dependency>

		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>3.7</version>
			<type>jar</type>
		</dependency>
		
		<dependency>
		    <groupId>com.google.android.gcm</groupId>
		    <artifactId>gcm-server</artifactId>
		    <version>1.0.2</version>
		</dependency>
		
		<dependency>
	      <groupId>com.sun.xml.ws</groupId>
	      <artifactId>jaxws-rt</artifactId>
	      <version>2.1.3</version>
	    </dependency>
	    
	</dependencies>

	<!-- profiles for releaseing on different platform, remember to run mvn clean if build for different platform in same workspace -->
	 <profiles>
            <profile>
                <id>android</id>
                    <build>
                    	<plugins>
							<plugin>
								<groupId>com.google.code.maven-replacer-plugin</groupId>
								<artifactId>replacer</artifactId>
								<version>1.5.2</version>
								<executions>
									<execution>
										<goals>
											<goal>replace</goal>
										</goals>
									</execution>
								</executions>
								<configuration>
									<file>${project.basedir}/target/classes/com/apptech/first/First.gwt.xml</file>
									<replacements>
										<replacement>
											<token>value="retina"</token>
											<value>value="android"</value>
										</replacement>
									</replacements>
								</configuration>
							</plugin>
							<plugin>
								<artifactId>maven-antrun-plugin</artifactId>
								<executions>
									<execution>
										<!-- Copy the compiled web app files to iOS and Android project -->
										<id>copywebappfolder</id>
										<phase>package</phase>
										<goals>
											<goal>run</goal>
										</goals>
										<configuration>
											<tasks>
												<!-- Android -->
												<echo>Copy web app to Android project</echo>
												<echo>Clear the output folder: ${project.basedir}/../First-Native-Android/assets/www</echo>
												<delete includeemptydirs="true">
				    								<fileset dir="${project.basedir}/../First-Native-Android/assets/www"
				    									includes="**/*" excludes=".svn/**, cordova.js" defaultexcludes="false"/>
				 								</delete>
												<copy todir="${project.basedir}/../First-Native-Android/assets/www" overwrite="false">
													<fileset dir="${project.build.directory}/${project.artifactId}"
														includes="First/**/*, First.html, cordova-plugins/**/*"/>
												</copy>
											</tasks>
										</configuration>
									</execution>
								</executions>
							</plugin>
                    	</plugins>
                    </build>
            </profile>
            <profile>
                <id>iphone</id>
                    <build>
                    	<plugins>
							<plugin>
								<groupId>com.google.code.maven-replacer-plugin</groupId>
								<artifactId>replacer</artifactId>
								<version>1.5.2</version>
								<executions>
									<execution>
										<goals>
											<goal>replace</goal>
										</goals>
									</execution>
								</executions>
								<configuration>
									<file>${project.basedir}/target/classes/com/apptech/first/First.gwt.xml</file>
									<replacements>
										<replacement>
											<token>value="retina"</token>
											<value>value="iphone"</value>
										</replacement>
									</replacements>
								</configuration>
							</plugin>
							<plugin>
								<artifactId>maven-antrun-plugin</artifactId>
								<executions>
									<execution>
										<!-- Copy the compiled web app files to iOS and Android project -->
										<id>copywebappfolder</id>
										<phase>package</phase>
										<goals>
											<goal>run</goal>
										</goals>
										<configuration>
											<tasks>
												<!-- iOS -->
												<echo>Copy web app to iOS project</echo>
												<echo>Clear the output folder: ${project.basedir}/../First-Native-IOS/www</echo>
												<delete includeemptydirs="true">
				    								<fileset dir="${project.basedir}/../First-Native-IOS/www"
				    									includes="**/*" excludes=".svn/**, cordova.js" defaultexcludes="false"/>
				 								</delete>
												<copy todir="${project.basedir}/../First-Native-IOS/www/" overwrite="false">
													<fileset dir="${project.build.directory}/${project.artifactId}"
														includes="First/**/*, First.html, cordova-plugins/**/*"/>
												</copy>
											</tasks>
										</configuration>
										
									</execution>
								</executions>
							</plugin>
                    	</plugins>
                    </build>
            </profile>
            <profile>
                <id>server</id>
                    <build>
                    	<plugins>
							
                    		<plugin>
								<artifactId>maven-antrun-plugin</artifactId>
								<executions>
									<execution>
										<!-- Remove the cache file. When the gwt debug, if would generate a 
											cache temp file in the source folder, which is useless when it releases. -->
										<phase>compile</phase>
										<goals>
											<goal>run</goal>
										</goals>
										<configuration>
											<tasks>
												<echo> delete First.nocache.js from .../webapp/First/ folder
												</echo>
											    <mkdir dir="src/main/webapp/First/"/>
												<delete>
													<fileset dir="src/main/webapp/First/">
														<include name="First.nocache.js" />
													</fileset>
													
												</delete>
												<echo> copy the app push certificate to the target folder, from
													${project.basedir}/src/main/resources to
													${project.build.outputDirectory}
												</echo>
												<copy todir="${project.build.outputDirectory}" overwrite="false">
													<fileset dir="${project.basedir}/src/main/resources">
														<include name="*.*" />
													</fileset>
												</copy>
											</tasks>
										</configuration>
									</execution>
									<execution>
										<!-- Copy the compiled web app files to iOS and Android project -->
										<id>copywebappfolder</id>
										<phase>package</phase>
										<goals>
											<goal>run</goal>
										</goals>
										<configuration>
											<tasks>
												<!-- release to tomcat -->
												<echo>Deploy the war to tomcat</echo>
											</tasks>
										</configuration>
										
									</execution>
								</executions>
							</plugin>
							<!-- tomcat maven plugin, to deploy war into tomcat -->
							<plugin>
							    <groupId>org.codehaus.cargo</groupId>
  								<artifactId>cargo-maven2-plugin</artifactId>
							    <executions>
							       
								    <execution>
					                    <id>deploy-to-remote-tomcat</id>
					                    <goals>
					                        <goal>redeploy</goal>
					                    </goals>
					                    <phase>package</phase>
					                    <configuration>
					                        <container>
					                            <containerId>tomcat7x</containerId>
					                            <type>remote</type>
					                        </container>
					                        <configuration>
					                            <type>runtime</type>
					                            <properties>
					                                <cargo.remote.uri>http://10.0.0.106:8080/manager/text</cargo.remote.uri>
					                                <cargo.remote.username>manager</cargo.remote.username>
					                                <cargo.remote.password>manager</cargo.remote.password>
					                            </properties>
					                        </configuration>
					                        <deployer>
					                            <type>remote</type>
					                        </deployer>
					                        <deployables>
					                            <deployable>
					                                <groupId>${project.groupId}</groupId>
					                                <artifactId>${project.artifactId}</artifactId>
					                                <type>${project.packaging}</type>
					                            </deployable>
					                        </deployables>
					                    </configuration>
					                </execution>
								   
								</executions>
							</plugin>
							<!-- Donot compile gwt while deploying server package -->
							<plugin>
								<groupId>org.codehaus.mojo</groupId>
								<artifactId>gwt-maven-plugin</artifactId>
								<version>2.5.0</version>
								<executions>
									<execution>
										<configuration>
											<runTarget>First.html</runTarget>
											<copyWebapp>true</copyWebapp>
											<module>com.apptech.first.First</module>
										</configuration>
										<id>compile gwt</id>
										<goals>
											<goal>compile</goal>
										</goals>
									</execution>
								</executions>
								<configuration>
									<runTarget>First.html</runTarget>
									<skip>true</skip>
								</configuration>
							</plugin>
						</plugins>
                    </build>
            </profile>
    </profiles>

</project>
